
主要知识点：(需要掌握!!!)
	1、认证、授权、realm
	2、配置类 shiroFilter securityManager realm
	3、shiro过滤器（在shiroFilter中配置）
		内置过滤器，如anon、logout、user、authc等
		自定义过滤器，如shiroOrFilter
	4、会话管理器 SessionManager SessionDao	redis实现session共享
	5、缓存管理，用于缓存角色和权限数据，redis实现 还可以做一个本地二级缓存，将redis数据存入本地变量中，这样就不用每次都读取redis数据
	6、记住我rememberMe cookieRememberManager类


shiro六大体系结构：
	Authentication		--认证，用户登录
	Authorization		--授权，用户具有哪些权限
	Cryptography		--安全数据加密
	SessionManagement	--会话管理
	Web Integration		--web系统集成
	Interations			--集成其它应用，spring、缓存等

shiro的三个核心类：
1.Subject	--用户主体
	通过SecurityUtils.getSubject()获取。
	主要方法：登录login、注销logout、是否认证isAuthenticated、拥有某角色hasRole、某权限isPermitted。
	如：
		Subject subject = SecurityUtils.getSubject();
		subject.login();

2.SecurityManager --核心类，安全管理器。
	注入Realm、缓存管理器CacheManager（可在realm注入）、会话管理器SessionManager、记住我RememberMeManager

3.Realm --shiro连接数据库的桥梁。
	用于认证和授权
	注入加密类HashedCredentialsMatcher、缓存管理器CacheManager



表单过滤器(FormAuthenticationFilter)


权限注解：
	--开启springAOP注解：配置DefaultAdvisorAutoProxyCreator和AuthorizationAttributeSourceAdvisor两个bean即可
	@RequiresAuthentication	--表示当前Subject已经通过login进行身份验证，即Subject.isAuthenticated()返回true
	@RequiresUser			--表示当权Subject已经身份验证或通过记住我登录
	@RequiresGuest	--表示当前Subject没有身份验证或通过记住我登录过，即是游客身份
	@RequiresRoles("role1")	--表示需要role1角色
	@RequiresRoles(value = {"role1", "role2"}, logical = Logical.OR)	--表示需要role1或role2角色
	@RequiresPermissions("/permission1")	--表示需要permission1权限
	@RequiresPermissions(value = {"permission1", "permission2"}, logical = Logical.OR)	--表示需要permission1或permission2权限


统一异常处理：
	针对普通请求和ajax异步请求的异常进行处理


1.认证、授权、realm
Shiro认证流程：
	创建SecurityManager -> 将SecurityManager注入SecurityUtils中 -> 创建主体Subject -> 主体提交认证请求 -> SecurityManager认证 -> Authentication认证 -> Realm验证	
Shiro授权流程：
	创建SecurityManager -> 将SecurityManager注入SecurityUtils中 -> 创建主体Subject -> 主体授权 -> SecurityManager授权 -> Authorizer授权 -> Realm获取角色权限数据

简单认证和授权测试：
-1）导入jar包
	<dependency>
		<groupId>org.apache.shiro</groupId>
		<artifactId>shiro-core</artifactId>
		<version>1.4.0</version>
	</dependency>
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>RELEASE</version>
	</dependency>
-2）测试
public class SimpleRealmTest {
	
	SimpleAccountRealm simpleAccountRealm = new SimpleAccountRealm();
	
	@Before
    public void addUser() { //模拟数据
        simpleAccountRealm.addAccount("admin", "123456", "admin", "user");
    }
	
	@Test
	public void test1() {
		// 1.创建SecurityManager
		DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();
		defaultSecurityManager.setRealm(simpleAccountRealm);
		
		// 2.主体提交认证请求
		SecurityUtils.setSecurityManager(defaultSecurityManager);
		Subject subject = SecurityUtils.getSubject();
		
		UsernamePasswordToken token = new UsernamePasswordToken("admin", "123456");
		subject.login(token);
		
		System.out.println("是否登录:" + subject.isAuthenticated());
		
		subject.checkRole("admin"); //有admin角色
		subject.checkRoles("admin", "user"); //同时有admin和user角色
		
		subject.logout(); //登出
		System.out.println("是否登录:" + subject.isAuthenticated());
	}
}


加密(HashedCredentialsMatcher)
	流程：创建HashedCredentialsMatcher对象，并设置散列算法和计算次数 -> 将HashedCredentialsMatcher对象设置到我们的Realm中
测试：
	@Before
	public void addUser() {
		// System.out.println(new Md5Hash("admin", "admin", 1023).toString()); //加密(密码，盐值，循环次数)
		
		simpleAccountRealm.addAccount("admin", "e10adc3949ba59abbe56e057f20f883e", "admin", "user");

		// 创建HashedCredentialsMatcher并设置到realm中
		HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();
		matcher.setHashAlgorithmName("md5");
		matcher.setHashIterations(1);
		simpleAccountRealm.setCredentialsMatcher(matcher);
	}


2.Realm
	有SimpleAccountRealm、IniRealm、JdbcRealm和自定义Realm等。

自定义Realm（重要）！！！
	--继承AuthorizingRealm，重写认证(doGetAuthenticationInfo)和授权(doGetAuthorizationInfo)方法。
测试：
-1）创建实体
public class User {
	private String username;
	private String password;
	...
}

-2）创建自定义Realm
public class UserRealm extends AuthorizingRealm {
	
	// 模拟数据库或缓存的数据
	Map<String, User> userMap = new HashMap<String, User>(16);
	Set<String> roleSet = new HashSet<>();
	Set<String> permissionSet = new HashSet<>();
	{
		userMap.put("admin", new User("admin", new Md5Hash("123456", "admin").toString())); 
		roleSet.add("admin"); roleSet.add("user");
		permissionSet.add("user:select"); permissionSet.add("user:update");
	}

	/**
	 * 授权
	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();
		
		// 模拟数据：从数据库或者缓存中，通过username获取角色及权限数据
//		String username = (String) principals.getPrimaryPrincipal();
//		Set<Role> roleSet = findRolesByUsername(username);
		simpleAuthorizationInfo.setRoles(roleSet);
		simpleAuthorizationInfo.setStringPermissions(permissionSet);
		
		return simpleAuthorizationInfo;
	}

	/**
	 * 认证
	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		// 1.从主体传过来的认证信息（用户名、凭证/密码）
		String username = (String) token.getPrincipal();
		
		// 2.模拟数据：通过username获取User记录，仅需要password和salt
		User user = userMap.get(username);
		
		SimpleAuthenticationInfo simpleAuthenticationInfo = new SimpleAuthenticationInfo(username, user.getPassword(), getName());
		simpleAuthenticationInfo.setCredentialsSalt(ByteSource.Util.bytes(username));
		return simpleAuthenticationInfo;
	}
}
-3）测试
public class UserRealmTest {

	@Test
	public void testUserRealm() {
		// 1.创建Realm对象
		UserRealm userRealm = new UserRealm();

		// 1.1 创建HashedCredentialsMatcher
		HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();
		matcher.setHashAlgorithmName("md5");
		matcher.setHashIterations(1);
		userRealm.setCredentialsMatcher(matcher);

		// 2.创建SecurityManager，将Realm对象注入
		DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();
		defaultSecurityManager.setRealm(userRealm);

		// 3.主体提交认证请求
		SecurityUtils.setSecurityManager(defaultSecurityManager);
		Subject subject = SecurityUtils.getSubject();
		UsernamePasswordToken token = new UsernamePasswordToken("admin", "123456");
		subject.login(token);

		System.out.println("是否登录:" + subject.isAuthenticated());

		// 4.检查用户角色、权限
		subject.checkRoles("admin"); // 授权
		subject.checkPermission("user:select");

		subject.logout();
		System.out.println("是否登录:" + subject.isAuthenticated());
	}
}


设置缓存(CacheManager)
	--用于Realm的doGetAuthorizationInfo()方法中，将角色和权限数据缓存起来。不然每次使用shiro:hasRole、shiro:hasPermission等标签，都会调用一次doGetAuthorizationInfo（）方法
	流程：创建Cache的bean对象 -> 将该对象set到realm或securityManager中


记住我(RememberMe)
	通过login()认证登录的，即authentication==true，其访问权限最高，能访问所有页面；登录时勾选了“记住我”，rememberMe==true，则可以访问所有user控制的页面，但不能访问authc控制的页面。
	流程：创建记住我管理器(CookieRememberMeManager)的bean对象 -> 将该对象set到realm或securityManager中


静态文件匿名访问：
	filterChainDefinitionMap.put("/assets/**", "anon"); //静态资源
	如：
		/springboot-shiro-test5/src/main/resources/static/assets/js/jquery.min.js
		<script th:src="@{assets/js/jquery.min.js}"></script>
		浏览器能直接访问则说明配置有效：http://localhost:8080/assets/js/jquery.min.js


*************************************************************************************
过滤器(filter):
规则：
	filterChain基于短路机制，即最先匹配原则。如设置/user/**=anon，则/user/aa=authc永远不会执行
分3类：
	--1类(登录相关)
	authc 	--FormAuthenticationFilter类，基于表单拦截器。会判断用户是否已登录(isAuthenticated()==true)，是则放行，否则跳转到登录页面。如：“/**=authc”，若没有登录会跳转到登录页。属性：usernameParam-表单提交的用户名参数名；passwordParam-表单提交的密码参数名；rememberMeParam-表单提交的记住我参数名；loginUrl-登录页地址；successUrl-登录成功默认重定向地址；failureKeyAttribute-登录失败后错误信息存储key
	authcBasic --BasicHttpAuthenticationFilter类，Basic HTTP身份验证拦截器。属性：applicationName-弹出登陆框显示的信息
	logout --LogoutFilter类，退出拦截器。属性：redirectUrl-退出成功后重定向的地址。如/logout=logout
	user   --UserFilter类，用户拦截器，用户已经身份认证(subject.isRemembered()==true)/记住我(subject.isAuthenticated()==true)登录都可。如/**=user
	anon	--AnonymousFilter类，匿名拦截器，即不需要登录即可访问。一般用于静态资源过滤。如/static/**=anon
	--2类(授权相关)
	roles	--RolesAuthorizationFilter类，角色拦截器，验证用户是否拥有该角色。如/user/**=roles[user]
	perms	--PermissionsAuthorizationFilter类，权限拦截器，验证用户是否拥有该权限。如/user/form=perms["user:create"]
	--其它类
	noSessionCreation --不创建会话，调用subject.getSession(false)不会有问题，但subject.getSession(true)会抛出DisabledSessionException异常。
层级关系：
(I)Filter
	(C)AbstractFilter
		(C)NameableFilter
			(C)OncePerRequestFilter
				(C)AdviceFilter
					(C)PathMatchingFilter
						(C)AccessControlFilter
				(C)AbstractShiroFilter
					(C)ShiroFilter
1.NameableFilter
	给filter起名字。如FormAuthenticationFilter类的名字为authc
2.OncePerRequestFilter
	用于防止多次执行Filter，即一次请求只会走一次过滤器链。另外提供enable属性用于是否启用该拦截器。
3.ShiroFilter
	ShiroFilter是整个Shiro的入口点，用于拦截需要安全控制的请求进行处理。
4.AdviceFilter
	AdviceFilter提供了AOP风格的支持，类似于SpringMVC的Interceptor
	存在三个方法：
		// 类似于AOP中的前置增强；在拦截器链执行之前执行；如果返回true则继续拦截器链；否则中断后续的拦截器链的执行直接返回；进行预处理（如基于表单的身份验证、授权）
		boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
		// 类似于AOP中的后置返回增强；在拦截器链执行完成后执行；进行后处理（如记录执行时间之类的）
		void postHandle(ServletRequest request, ServletResponse response) throws Exception
		// 类似于AOP中的后置最终增强；即不管有没有异常都会执行；可以进行清理资源（如接触Subject与线程的绑定之类的）
		void afterCompletion(ServletRequest request, ServletResponse response, Exception exception) throws Exception
5.PathMatchingFilter
	PathMatchingFilter提供基于Ant风格的请求路径匹配功能。如“role[admin,user]”自动根据“,”分割解析到一个路径参数配置并绑定到相应路径
	存在两个方法：
		// true-匹配。该方法用于path与请求路径进行匹配的方法
		boolean pathsMatch(String path, ServletRequest request)
		// 在preHandle中，当pathsMatch匹配一个路径后，会调用opPreHandler方法并将路径绑定参数配置传给mappedValue，然后可以在这个方法中进行一些验证（如角色授权），如果验证失败可以返回false中断流程；默认返回true；也就是说子类可以只实现onPreHandle即可，无须实现preHandle。如果没有path与请求路径匹配，默认是通过的（即preHandle返回true）
		boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
6.AccessControlFilter
	AccessControlFilter提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等。
	存在三个方法：
		// 表示是否允许访问；mappedValue就是[urls]配置中拦截器参数部分，如果允许访问返回true，否则false
		abstract boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
		// 表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可
		protected abstract boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception;
		
		// onPreHandle会自动调用这两个方法决定是否继续处理
		public boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {
			return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);
		}
	另外一些属性和方法：
		void setLoginUrl(String loginUrl) //身份验证时使用，默认/login.jsp
		String getLoginUrl()
		Subject getSubject(ServletRequest request, ServletResponse response) //获取Subject实例
		boolean isLoginRequest(ServletRequest request, ServletResponse response)//当前请求是否是登录请求
		void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response) throws IOException //将当前请求保存起来并重定向到登录页面
		void saveRequest(ServletRequest request) //将请求保存起来，如登录成功后再重定向回该请求
		void redirectToLogin(ServletRequest request, ServletResponse response) //重定向到登录页面


过滤器链：
	shiro对Servlet容器的FilterChain进行了代理，即ShiroFilter在继续Servlet容器的Filter链执行之前，通过ProxiedFilterChain对Servlet容器的FilterChain进行了代理。即先走Shiro自己的Filter体系，然后才会委托给Servlet容器的FilterChain进行Servlet容器级别的Filter链执行。
	Shiro的ProxiedFilterChain执行流程：1、先执行Shiro自己的Filter链 2、再执行Servlet容器的Filter链
	ProxiedFilterChain是通过FilterChainResolver根据配置文件中[urls]部分是否与请求的URL是否匹配解析得到的。得到一个代理chain详情参考FilterChainResolver类的getChain(request, response, originalChain)方法，originalChain表示原始chain。
	PathMatchingFilterChainResolver类提供了FilterChainResolver实现，其根据[urls]中配置的url模式（默认Ant风格）=拦截器链和请求的url是否匹配来解析得到配置的拦截器链的。
	而PathMatchingFilterChainResolver内部通过FilterChainManager维护着拦截器链，比如DefaultFilterChainManager实现维护着url模式与拦截器链的关系。因此我们可以通过FilterChainManager进行动态动态增加url模式与拦截器链的关系。
	DefaultFilterChainManager会默认添加org.apache.shiro.web.filter.mgt.DefaultFilter中声明的拦截器。如anon(AnonymousFilter.class),authc(FormAuthenticationFilter.class)
	详情： https://m.2cto.com/kf/201610/552718.html?tdsourcetag=s_pcqq_aiomsg	--看不懂拦截器链部分！！！

	扩展OncePerRequestFilter：提供doFilterInternal()方法
	扩展AdviceFilter：提供preHandle、postHandle、afterCompletion这三个方法
	扩展PathMatchingFilter：提供onPreHandle方法，并继承AdviceFilter类，重写preHandle方法用于添加url过滤。
	扩展AccessControlFilter：提供isAccessAllowed、onAccessDenied两个方法，并继承PathMatchingFilter类，重写onPreHandle方法用于执行上面两个方法。

因此一般过滤器设置如下：
	Map<String, String> filterChainDefinitionMap = new LinkedHashMap<String, String>();
	filterChainDefinitionMap.put("/assets/**", "anon"); //静态资源文件css、img、js
	filterChainDefinitionMap.put("/login", "anon");
	filterChainDefinitionMap.put("/logout", "logout");
	filterChainDefinitionMap.put("/**", "user"); //user表示authentication=true || rememberMe=true 均可访问
	filterChainDefinitionMap.put("/pay/**", "authc"); //支付页面需要已登录



*************************************************************************************
shiro会话管理：
	shiro通过org.apache.shiro.session.mgt.eis.SessionDAO对象的getActiveSessions()方法获取到当前所有有效的Session对象。
	通过这些Session对象，我们可以实现一些比较有趣的功能，如查看当前系统的在线人数、查看这些在线用户的一些基本信息、强制让某个用户下线等。
	详情：https://mrbird.cc/Spring-Boot-Shiro%20session.html




Authenticator
	AuthenticationToken --登录用户
	AuthenticationInfo --数据库用户
	CredentialsMatcher --密码匹配器，校验登录用户与数据库用户是否一致，详情参考具体实现类

--附：executeLogin()方法在Filter中调用，要了解各种Filter的用途
JWTFilter.executeLogin(request, response) && AuthenticatingFilter.executeLogin(request, response)
	DelegatingSubject.login(token);
		DefaultSecurityManager.login(subject, token);
			AuthenticatingSecurityManager.authenticate(token);
				AbstractAuthenticator.authenticate(token);
					ModularRealmAuthenticator.doAuthenticate(token);
						doSingleRealmAuthentication(realm, token);
							AuthenticatingRealm.getAuthenticationInfo(token);
								info = Realm.doGetAuthenticationInfo(token); //通过自定义Realm得到数据库记录
								assertCredentialsMatch(token, info); //密码匹配















